const hashPairs = [];
for (let j = 0; j < 32; j++) {
  hashPairs.push(tokenData.hash.slice(2 + (j * 2), 4 + (j * 2)));
}
const decPairs = hashPairs.map(x => {
    return parseInt(x, 16);
  });

S=Uint32Array.from([0,1,s=t=2,3].map(i=>parseInt(tokenData.hash.substr(i*8+2,8),16)));R=_=>(t=S[3],S[3]=S[2],S[2]=S[1],S[1]=s=S[0],t^=t<<11,S[0]^=(t^t>>>8)^(s>>>19),S[0]/2**32);

const seed = parseInt(tokenData.hash.slice(2,16), 16);

function rnd(min, max) {
    const rand = R();
    if (typeof min === 'undefined') {
      return rand;
    } else if (typeof max === 'undefined') {
      if (min instanceof Array) {
        return min[floor(rand * min.length)];
      } else {
        return rand * min;
      }
    } else {
      if (min > max) {
        const tmp = min;
        min = max;
        max = tmp;
      }
      return rand * (max - min) + min;
    }
}

function w(val) {if (val == null) return width;return width * val;}
function h(val) {if (val == null) return height;return height * val;}
function d(val) {if (val == null) return height;return height * val;}

let play = true

function setup() {
  noiseSeed(seed)
  const smD = windowWidth < windowHeight ? windowWidth : windowHeight;
  createCanvas(smD, smD, WEBGL);
}

function draw() {
  angleMode(DEGREES)
  pointLight(215, 0, 0, 0, -200, d(.35))
  const angle = frameCount
  let light2_rotationX = w(.3)*cos(angle)
  let light2_mouse = mouseX
  pointLight(250, 224, 80, light2_mouse, h(.25), d(.3))
  bgRect()
  bg_spirals()
  //noLoop()
  birdCircle()
  birdCircle2()
  frameRate(24)
  if (play === false){
    noLoop()
  }else{
    loop()
  }
}

function bgRect() {
  push()
  //translate(width/2,height/2)
  rectMode(CENTER)
  noStroke()
  ambientMaterial(165)
  rect(0,0,width,height)
  pop()
}

function bird_ambient(x,y,bird,r) {
  push()
  ambientMaterial(215,0,0)
  noStroke()
  translate(x,y,0)
  bird(r)
  pop()
}

function bird_specular(x,y,bird,r) {
  push()
  specularMaterial(255, 215)
  noStroke()
  translate(x,y,0)
  bird(r)
  pop()
}

function bird_combined(x,y,bird,r) {
  //rotateZ(rotation)
  bird_ambient(x,y,bird,r)
  bird_specular(x,y,bird,r)
}

function wholeBird(r) {
  rotateZ(r)
  translate(-width/2,-height/2, d(.05))
  let coords = [
    [45941,44303,46087,45992,46470,43765],
    [45202,45759,45941,44303,46087,45992],
    [48471,49965,48660,50485,49455,49928],
    [47077,49043,48660,50485,48471,49965],
    [48362,50955,47077,49043,48660,50485],
    [47580,51384,47077,49043,48362,50955],
    [46842,52519,47077,49043,47580,51384],
    [45202,45759,47077,49043,46087,45992],
    [44035,43272,44923,43392,44923,41583],
    [44013,44624,44923,43392,44035,43272],
    [45202,45759,44013,44624,44923,43392],
    [42850,40273,44013,44624,43092,40148],
    [42478,42824,44013,44624,42850,40273],
    [42568,44442,44013,44624,42478,42824],
    [43392,46573,44013,44624,42568,44442],
    [45202,45759,43392,46573,44013,44624],
    [43296,46883,45202,45759,43392,46573],
    [47077,49043,43296,46883,45202,45759],
    [46842,52519,43296,46883,47077,49043],
    [40281,40815,42018,43312,40409,40535],
    [40489,42480,42018,43312,40281,40815],
    [40281,43120,42018,43312,40489,42480],
    [40746,45105,42018,43312,40281,43120],
    [42517,47318,42018,43312,40746,45105],
    [43296,46883,42517,47318,42018,43312],
    [39649,45521,42517,47318,39521,44729],
    [40618,47554,42517,47318,39649,45521],
    [43339,49067,42517,47318,40618,47554],
    [40472,48808,43339,49067,40420,48317],
    [41272,50202,43339,49067,40472,48808],
    [42409,50917,43339,49067,41272,50202],
    [43296,46883,43339,49067,42517,47318],
    [46842,52519,43339,49067,43296,46883],
    [45416,53267,43339,49067,46842,52519],
    [44418,53267,43339,49067,45416,53267],
    [42478,51913,43339,49067,44418,53267],
    [42409,50917,42478,51913,43339,49067],
    [48277,59038,48829,59226,48600,59409],
    [48600,55844,48277,59038,48829,59226],
    [45701,58983,48277,59038,48600,55844],
    [44044,58428,45701,58983,48600,55844],
    [43180,58027,44044,58428,43702,58761],
    [46299,55312,44044,58428,43180,58027],
    [44057,58927,45701,58983,44044,58428],
    [45179,59471,44057,58927,45701,58983],
    [45792,59490,45701,58983,48277,59038],
    [48200,59649,48277,59038,45792,59490],
    [48600,55844,46299,55312,44044,58428],
    [46519,54808,48600,55844,46299,55312],
    [49455,54673,46519,54808,48600,55844],
    [46700,52930,49455,54673,46519,54808],
    [50000,53030,46700,52930,49455,54673],
    [47692,51572,50000,53030,46700,52930],
    [48471,51142,50000,53030,47692,51572],
    [51667,51178,48471,51142,50000,53030],
    [48774,50573,51667,51178,48471,51142],
    [52025,50392,51667,51178,52438,51066],
    [50220,49475,51667,51178,48774,50573],
    [52025,50392,50220,49475,51667,51178],
    [52321,50203,50220,49475,52025,50392],
    [50442,48979,52321,50203,50220,49475],
    [52505,49646,50442,48979,52321,50203],
    [52779,48960,52505,49646,53815,49318],
    [52092,48896,52505,49646,52779,48960],
    [50973,48722,52092,48896,51698,48722],
    [50442,48979,52092,48896,52505,49646],
    [50973,48722,50442,48979,52092,48896],
    [49455,55233,51602,55192,49690,55662],
    [50058,53390,51602,55192,49455,55233],
    [52932,54431,50058,53390,51602,55192],
    [50651,52543,52932,54431,50058,53390],
    [54987,52400,50651,52543,52932,54431],
    [51446,51918,54987,52400,50651,52543],
    [51689,51459,54987,52400,51446,51918],
    [55764,52206,51689,51459,54987,52400],
    [53663,51500,51689,51459,52952,51224],
    [55661,51213,55764,52206,53663,51500],
    [51689,51459,55764,52206,53663,51500],
    [57135,51265,55661,51213,55764,52206],
    [57357,50142,57135,51265,55661,51213],
    [59937,50109,57357,50142,57135,51265],
    [60142,49553,59937,50109,57357,50142],
    [60785,49240,60142,49553,59937,50109]]

  let relCoords = [];
  const den = 100000
  coords.forEach(i => relCoords.push([w(i[0]/den),h(i[1]/den),w(i[2]/den),h(i[3]/den),w(i[4]/den),h(i[5]/den)]))
  relCoords.forEach(i => triangle(i[0],i[1],i[2],i[3],i[4],i[5]))
  // create speckle texture function and apply to coords[i] as above
  relCoords.forEach(i => speckling_2(i[0],i[1],i[2],i[3],i[4],i[5]))
}

function wholeBird2(r) {
  rotateZ(r)
  translate(-width/2,-height/2, d(.05))
  let coords = [
    [45751,45715,45053,44919,44355,45715],
    [45203,44526,45751,45715,45053,44919],
    [45968,44009,45751,45715,45203,44526],
    [47136,44009,45751,45715,45968,44009],
    [48191,45084,45751,45715,47136,44009],
    [45896,46046,48191,45084,45751,45715],
    [48077,45353,45896,46046,48191,45084],
    [46144,46273,48077,45353,45896,46046],
    [46795,46118,48077,45353,46144,46273],
    [49049,45229,46795,46118,48077,45353],
    [46950,46180,49049,45229,46795,46118],
    [49566,45643,46950,46180,49049,45229],
    [48191,54099,48687,55608,48501,55991],
    [48325,51111,48191,54099,48687,55608],
    [46071,51566,48325,51111,48191,54099],
    [46909,49044,46071,51566,48325,51111],
    [45306,49623,46909,49044,46071,51566],
    [45431,47782,46909,49044,45306,49623],
    [46030,46604,46909,49044,45431,47782],
    [46950,46180,46909,49044,46030,46604],
    [49566,45643,46909,49044,46950,46180],
    [47198,49168,49566,45643,46909,49044],
    [50486,45891,47198,49168,49566,45643],
    [50444,48423,47198,49168,50486,45891],
    [48191,50636,50444,48423,47198,49168],
    [50713,50367,50444,48423,48191,50636],
    [49007,51173,50713,50367,48191,50636],
    [49276,55102,50382,54750,49007,51173],
    [49731,55608,50382,54750,49276,55102],
    [51148,54482,50382,54750,50910,55040],
    [52440,53975,51148,54482,51664,54575],
    [53877,53644,52440,53975,53649,53975],
    [53587,53138,52440,53975,53877,53644],
    [50713,50367,52440,53975,53587,53138],
    [49007,51173,52440,53975,50382,54750],
    [50713,50367,49007,51173,52440,53975],
    [53308,48165,50444,48423,50486,45891],
    [51737,49602,53308,48165,50444,48423],
    [52212,50553,53308,48165,51737,49602],
    [54456,51918,54673,51597,54735,51897],
    [55303,51235,55490,52125,55645,51990],
    [54673,51597,55303,51235,55490,52125],
    [53784,51876,54673,51597,54456,51918],
    [52212,50553,54673,51597,53784,51876],
    [53308,48165,54673,51597,52212,50553],
    [55303,51235,54673,51597,53308,48165]]

  let relCoords = [];
  const den = 100000
  coords.forEach(i => relCoords.push([w(i[0]/den),h(i[1]/den),w(i[2]/den),h(i[3]/den),w(i[4]/den),h(i[5]/den)]))
  relCoords.forEach(i => triangle(i[0],i[1],i[2],i[3],i[4],i[5]))
  relCoords.forEach(i => speckling_2(i[0],i[1],i[2],i[3],i[4],i[5]))

}

function speckling_2(x1,y1,x2,y2,x3,y3) {

  let trArea = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2

  let num_specks = trArea/35;
  if (trArea < 0){
    num_specks = (trArea/35)*(-1)
  }

  for (let i = 0; i < num_specks; i++) {

    let t = rnd();
    let s = rnd();
    
    if (s+t > 1) {
      s = 1-s;
      t = 1-t;
    }
    
    a = 1-s-t;
    b = s;
    c = t;

    let qx = a*x1 + b*x2 + c*x3;
    let qy = a*y1 + b*y2 + c*y3;

    noStroke()
    fill(10)
    ellipse(qx,qy,w(.001));
  } 
}

function mousePressed() {
  // toggle playback
  if (play === true) {
    play = false;
  } else { // implies play === false
    play = true;
  }
}

function birdCircle() {
  angleMode(DEGREES)
  //translate(width/2,height/2)
  let angle = 0
  let angleInc = 5
  let r = w(.25)
  let step = 60
  rotateZ(angle + frameCount/5)
  for (let i = 0; i < 6; i++) {
    let x = r * 1.5*sin(angle+i*step);
    let y = r * 1.5*cos(angle+i*step);
    //rotate(angle)
    fill(255,0,0)
    bird_combined(x,y,wholeBird,frameCount/2+angle+i*step)
  }
}

function birdCircle2() {
  let angle = 0
  step = 90
  let r = w(.25)
  let r_a = (frameCount)*(-1)
  rotateZ(r_a)
  for (let i = 0; i < 4; i++) {
    let rel_R = r_a + step*i
    let x = 0.7*r * sin(angle+i*step);
    let y = 0.7*r * cos(angle+i*step);
    //rotate(angle)
    fill(255,0,0)
    bird_combined(x,y,wholeBird2,-rel_R)
  }
}

function bg_spirals() {
  angleMode(DEGREES)

  let xoff = 0
  let inc = .000001

  for (let i = 0; i < 100; i++) {
    let size = map(i,0,100,0,w(1.5))
    let start = rnd(360)
    let stop = start + rnd(360)
    noFill()
    stroke(rnd(50,125),100*noise(xoff))
    strokeWeight(w(.003)*noise(xoff))
    arc(0,0,size,size,start,stop)
    xoff += inc
  }
  for (let i = 0; i < 50; i++) {
    let size = map(i,0,50,0,w(1.5))
    let start = rnd(360)
    let stop = start + rnd(360)
    noFill()
    stroke(rnd(100,200),100*noise(xoff))
    strokeWeight(w(.001)*noise(xoff))
    arc(0,0,size,size,start,stop)
    xoff += inc
  }
}